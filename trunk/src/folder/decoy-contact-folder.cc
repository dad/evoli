#include "decoy-contact-folder.hh"
#include <fstream>
#include <cmath>


void DecoyContactStructure::read(ifstream& fin) {
	int r1, r2;
	string r1aa, r2aa;
	while (!fin.eof()) {
		fin >> r1 >> r1aa >> r2 >> r2aa;
		if (r1 >= 0 && r2 >= 0) {
			m_contacts.push_back(Contact(r1,r2));
		}
	}
}

int DecoyContactStructure::getMaxResidueNumber() {
	int max_res = -1;
	vector<Contact>::const_iterator it=m_contacts.begin();
	for ( ; it!=m_contacts.end(); it++ )	{
		if ((*it).first > max_res)
			max_res = (*it).first;
		if ((*it).second > max_res)
			max_res = (*it).second;
	}
	return max_res;
}

DecoyContactFolder::DecoyContactFolder(int length, double log_num_confs, vector<DecoyContactStructure*>& structs) {
	m_length = length;
	m_structures = structs;
	m_log_num_conformations = log_num_confs;
	m_num_folded = 0;
}

DecoyContactFolder::DecoyContactFolder(int length, double log_num_confs, ifstream& fin, const string& dir): m_structures(0) {
	m_length = length;
	ContactMapUtil::readContactMapsFromFile(fin, dir, m_structures);
	m_log_num_conformations = log_num_confs;
	m_num_folded = 0;
}

bool DecoyContactFolder::good() {
	return m_structures.size() > 0;
}

/**
 * Fold the protein and return folding information (structure, free energy).
 **/
FoldInfo DecoyContactFolder::fold(const Sequence& s) {
	double kT = 0.6;
	double minG = 1e50;
	int minIndex = 0;
	double Z = 0;
	double dG;

	double sumG = 0.0;
	double sumsqG = 0.0;

	for ( unsigned int sid = 0; sid < m_structures.size(); sid++) {
		double G = 0;

		// calculate binding energy of this fold
		const vector<Contact> &pair_list = m_structures[sid]->getContacts();
		vector<Contact>::const_iterator it=pair_list.begin();
		for ( ; it!=pair_list.end(); it++ )	{
			int s1 = (*it).first;
			int s2 = (*it).second;
			if (s1 < m_length && s2 < m_length) {
				double contact_G = contactEnergies[s[s1]][s[s2]];
				G += contact_G;
			}

			//cout << "(" << (*it).first << ", " << (*it).second << ") -> " << GeneticCodeUtil::residues[p[(*it).first]] 
			//	 << ":" << GeneticCodeUtil::residues[p[(*it).second]] << " " << contact_G << " " << G << endl << flush;
		}
		// check if binding energy is lower than any previously calculated one
		if ( G < minG )
		{
			minG = G;
			minIndex = sid;
		}
		// add energy to partition sum
		sumG += G;
		sumsqG += G*G;
	}

	unsigned int num_confs = m_structures.size();
	double mean_G = sumG/num_confs;
	double var_G = (sumsqG - (sumG*sumG)/num_confs)/(num_confs-1.0);
	// calculate free energy of folding
	dG = minG + (var_G - 2*kT*mean_G)/(2.0*kT) + kT * m_log_num_conformations;

	//cout << "minG:" << minG << endl;
	//cout << "mean_G:" << mean_G << endl;
	//cout << "var_G:" << var_G << endl;
	//cout << "dG:" << dG << endl;

	// increment folded count
	m_num_folded += 1;

	return FoldInfo(dG, minIndex);
}


// Contact energies according to Miyazawa and Jernigan, Estimation of
// effective interresidue contact energies from protein crystal
// structures: Quasi-chemical approximation. Macromolecules 18:534-552
// (1985).
//Table V, values e_{ij}.
/*
const double DecoyContactFolder::contactEnergies[20][20] =
	{
		// CYS
		{ -5.44, -5.05, -5.63, -5.03, -5.03, -4.46, -4.76, -3.89, -3.38, -3.16, -2.88, -2.86, -2.73, -2.59, -2.08, -2.66, -3.63, -2.70, -1.54, -2.92 },
		// MET
		{ -5.05, -6.06, -6.68, -6.33, -6.01, -5.52, -6.37, -4.92, -3.99, -3.75, -3.73, -3.55, -3.17, -3.50, -3.19, -2.90, -3.31, -3.49, -3.11, -4.11 },
		// PHE
		{ -5.63, -6.68, -6.85, -6.39, -6.26, -5.75, -6.02, -4.95, -4.36, -3.72, -3.76, -3.56, -3.30, -3.55, -3.51, -3.31, -4.61, -3.54, -2.83, -3.73 },
		// ILE
		{ -5.03, -6.33, -6.39, -6.22, -6.17, -5.58, -5.64, -4.63, -4.41, -3.65, -3.74, -3.43, -3.22, -2.99, -3.23, -2.91, -3.76, -3.33, -2.70, -3.47 },
		// LEU
		{ -5.03, -6.01, -6.26, -6.17, -5.79, -5.38, -5.50, -4.26, -3.96, -3.43, -3.43, -3.16, -3.09, -2.99, -2.91, -2.59, -3.84, -3.15, -2.63, -3.06 },
		// VAL
		{ -4.46, -5.52, -5.75, -5.58, -5.38, -4.94, -5.05, -4.05, -3.62, -3.06, -2.95, -2.79, -2.67, -2.36, -2.56, -2.25, -3.38, -2.78, -1.95, -2.96 },
		// TRP
		{ -4.76, -6.37, -6.02, -5.64, -5.50, -5.05, -5.42, -4.44, -3.93, -3.37, -3.31, -2.95, -3.16, -3.11, -2.94, -2.91, -4.02, -3.56, -2.49, -3.66 },
		// TYR
		{ -3.89, -4.92, -4.95, -4.63, -4.26, -4.05, -4.44, -3.55, -2.85, -2.50, -2.48, -2.30, -2.53, -2.47, -2.42, -2.25, -3.33, -2.75, -2.01, -2.80 },
		// ALA
		{ -3.38, -3.99, -4.36, -4.41, -3.96, -3.62, -3.93, -2.85, -2.51, -2.15, -2.15, -1.89, -1.70, -1.44, -1.51, -1.57, -2.09, -1.50, -1.10, -1.81 },
		// GLY
		{ -3.16, -3.75, -3.72, -3.65, -3.43, -3.06, -3.37, -2.50, -2.15, -2.17, -2.03, -1.70, -1.54, -1.56, -1.22, -1.62, -1.94, -1.68, -0.84, -1.72 },
		// THR
		{ -2.88, -3.73, -3.76, -3.74, -3.43, -2.95, -3.31, -2.48, -2.15, -2.03, -1.72, -1.59, -1.59, -1.51, -1.45, -1.66, -2.31, -1.97, -1.02, -1.66 },
		// SER
		{ -2.86, -3.55, -3.56, -3.43, -3.16, -2.79, -2.95, -2.30, -1.89, -1.70, -1.59, -1.48, -1.37, -1.31, -1.48, -1.46, -1.94, -1.22, -0.83, -1.35 },
		// GLN
		{ -2.73, -3.17, -3.30, -3.22, -3.09, -2.67, -3.16, -2.53, -1.70, -1.54, -1.59, -1.37, -0.89, -1.36, -1.33, -1.26, -1.85, -1.85, -1.02, -1.73 },
		// ASN
		{ -2.59, -3.50, -3.55, -2.99, -2.99, -2.36, -3.11, -2.47, -1.44, -1.56, -1.51, -1.31, -1.36, -1.59, -1.43, -1.33, -2.01, -1.41, -0.91, -1.43 },
		// GLU
		{ -2.08, -3.19, -3.51, -3.23, -2.91, -2.56, -2.94, -2.42, -1.51, -1.22, -1.45, -1.48, -1.33, -1.43, -1.18, -1.23, -2.27, -2.07, -1.60, -1.40 },
		// ASP
		{ -2.66, -2.90, -3.31, -2.91, -2.59, -2.25, -2.91, -2.25, -1.57, -1.62, -1.66, -1.46, -1.26, -1.33, -1.23, -0.96, -2.14, -1.98, -1.32, -1.19 },
		// HIS
		{ -3.63, -3.31, -4.61, -3.76, -3.84, -3.38, -4.02, -3.33, -2.09, -1.94, -2.31, -1.94, -1.85, -2.01, -2.27, -2.14, -2.78, -2.12, -1.09, -2.17 },
		// ARG
		{ -2.70, -3.49, -3.54, -3.33, -3.15, -2.78, -3.56, -2.75, -1.50, -1.68, -1.97, -1.22, -1.85, -1.41, -2.07, -1.98, -2.12, -1.39, -0.06, -1.85 },
		// LYS
		{ -1.54, -3.11, -2.83, -2.70, -2.63, -1.95, -2.49, -2.01, -1.10, -0.84, -1.02, -0.83, -1.02, -0.91, -1.60, -1.32, -1.09, -0.06,  0.13, -0.67 },
		// PRO
		{ -2.92, -4.11, -3.73, -3.47, -3.06, -2.96, -3.66, -2.80, -1.81, -1.72, -1.66, -1.35, -1.73, -1.43, -1.40, -1.19, -2.17, -1.85, -0.67, -1.18 }
	};
*/


// Table VI, values e_{ij}+e_{rr}-e_{ir}-e_{jr}
const double DecoyContactFolder::contactEnergies[20][20] =
      {
	      // CYS
	      { -1.06,  0.19, -0.23,  0.16, -0.08,  0.06,  0.08,  0.04,  0.00, -0.08,  0.19, -0.02,  0.05,  0.13,  0.69,  0.03, -0.19,  0.24,  0.71,  0.00 },
	      // MET
	      {  0.19,  0.04, -0.42, -0.28, -0.20, -0.14, -0.67, -0.13,  0.25,  0.19,  0.19,  0.14,  0.46,  0.08,  0.44,  0.65,  0.99,  0.31,  0.00, -0.34 },
	      // PHE
	      { -0.23, -0.42, -0.44, -0.19, -0.30, -0.22, -0.16,  0.00,  0.03,  0.38,  0.31,  0.29,  0.49,  0.18,  0.27,  0.39, -0.16,  0.41,  0.44,  0.20 },
	      // ILE
	      {  0.16, -0.28, -0.19, -0.22, -0.41, -0.25,  0.02,  0.11, -0.22,  0.25,  0.14,  0.21,  0.36,  0.53,  0.35,  0.59,  0.49,  0.42,  0.36,  0.25 },
	      // LEU
	      { -0.08, -0.20, -0.30, -0.41, -0.27, -0.29, -0.09,  0.24, -0.01,  0.23,  0.20,  0.25,  0.26,  0.30,  0.43,  0.67,  0.16,  0.35,  0.19,  0.42 },
	      // VAL
	      {  0.06, -0.14, -0.22, -0.25, -0.29, -0.29, -0.07,  0.02, -0.10,  0.16,  0.25,  0.18,  0.24,  0.50,  0.34,  0.58,  0.19,  0.30,  0.44,  0.09 },
	      // TRP
	      {  0.08, -0.67, -0.16,  0.02, -0.09, -0.07, -0.12, -0.04, -0.09,  0.18,  0.22,  0.34,  0.08,  0.06,  0.29,  0.24, -0.12, -0.16,  0.22, -0.28 },
	      // TYR
	      {  0.04, -0.13,  0.00,  0.11,  0.24,  0.02, -0.04, -0.06,  0.09,  0.14,  0.13,  0.09, -0.20, -0.20, -0.10,  0.00, -0.34, -0.25, -0.21, -0.33 },
	      // ALA
	      {  0.00,  0.25,  0.03, -0.22, -0.01, -0.10, -0.09,  0.09, -0.13, -0.07, -0.09, -0.06,  0.08,  0.28,  0.26,  0.12,  0.34,  0.43,  0.14,  0.10 },
	      // GLY
	      { -0.08,  0.19,  0.38,  0.25,  0.23,  0.16,  0.18,  0.14, -0.07, -0.38, -0.26, -0.16, -0.06, -0.14,  0.25, -0.22,  0.20, -0.04,  0.11, -0.11 },
	      // THR
	      {  0.19,  0.19,  0.31,  0.14,  0.20,  0.25,  0.22,  0.13, -0.09, -0.26,  0.03, -0.08, -0.14, -0.11,  0.00, -0.29, -0.19, -0.35, -0.09, -0.07 },
	      // SER
	      { -0.02,  0.14,  0.29,  0.21,  0.25,  0.18,  0.34,  0.09, -0.06, -0.16, -0.08, -0.20, -0.14, -0.14, -0.26, -0.31, -0.05,  0.17, -0.13,  0.01 },
	      // GLN
	      {  0.05,  0.46,  0.49,  0.36,  0.26,  0.24,  0.08, -0.20,  0.08, -0.06, -0.14, -0.14,  0.29, -0.25, -0.17, -0.17, -0.02, -0.52, -0.38, -0.42 },
	      // ASN
	      {  0.13,  0.08,  0.18,  0.53,  0.30,  0.50,  0.06, -0.20,  0.28, -0.14, -0.11, -0.14, -0.25, -0.53, -0.32, -0.30, -0.24, -0.14, -0.33, -0.18 },
	      // GLU
	      {  0.69,  0.44,  0.27,  0.35,  0.43,  0.34,  0.29, -0.10,  0.26,  0.25,  0.00, -0.26, -0.17, -0.32, -0.03, -0.15, -0.45, -0.74, -0.97, -0.10 },
	      // ASP
	      {  0.03,  0.65,  0.39,  0.59,  0.67,  0.58,  0.24,  0.00,  0.12, -0.22, -0.29, -0.31, -0.17, -0.30, -0.15,  0.04, -0.39, -0.72, -0.76,  0.04 },
	      // HIS
	      { -0.19,  0.99, -0.16,  0.49,  0.16,  0.19, -0.12, -0.34,  0.34,  0.20, -0.19, -0.05, -0.02, -0.24, -0.45, -0.39, -0.29, -0.12,  0.22, -0.21 },
	      // ARG
	      {  0.24,  0.31,  0.41,  0.42,  0.35,  0.30, -0.16, -0.25,  0.43, -0.04, -0.35,  0.17, -0.52, -0.14, -0.74, -0.72, -0.12,  0.11,  0.75, -0.38 },
	      // LYS
	      {  0.71,  0.00,  0.44,  0.36,  0.19,  0.44,  0.22, -0.21,  0.14,  0.11, -0.09, -0.13, -0.38, -0.33, -0.97, -0.76,  0.22,  0.75,  0.25,  0.11 },
	      // PRO
	      {  0.00, -0.34,  0.20,  0.25,  0.42,  0.09, -0.28, -0.33,  0.10, -0.11, -0.07,  0.01, -0.42, -0.18, -0.10,  0.04, -0.21, -0.38,  0.11,  0.26 }
      };

/*// Contact energies according to Miyazawa and Jernigan, Residue-Residue Potentials
// with a Favorable Contact Pair Term and an Unfavorable High Packing Density Term,
// for Simulation and Threading. J. Mol. Biol. (1996) 256:623-644
// Table III upper triangle, values e_{ij}.
const double DecoyContactFolder::contactEnergies[20][20] =
	{
		// CYS
		{-5.44, -4.99, -5.80, -5.50, -5.83, -4.96, -4.95, -4.16, -3.57, -3.16, -3.11, -2.86, -2.59, -2.85, -2.41, -2.27, -3.60, -2.57, -1.95, -3.07},
		// MET
		{-4.99, -5.46, -6.56, -6.02, -6.41, -5.32, -5.55, -4.91, -3.94, -3.39, -3.51, -3.03, -2.95, -3.30, -2.57, -2.89, -3.98, -3.12, -2.48, -3.45},
		// PHE
		{-5.80, -6.56, -7.26, -6.84, -7.28, -6.29, -6.16, -5.66, -4.81, -4.13, -4.28, -4.02, -3.75, -4.10, -3.48, -3.56, -4.77, -3.98, -3.36, -4.25},
		// ILE
		{-5.50, -6.02, -6.84, -6.54, -7.04, -6.05, -5.78, -5.25, -4.58, -3.78, -4.03, -3.52, -3.24, -3.67, -3.17, -3.27, -4.14, -3.63, -3.01, -3.76},
		// LEU
		{-5.83, -6.41, -7.28, -7.04, -7.37, -6.48, -6.14, -5.67, -4.91, -4.16, -4.34, -3.92, -3.74, -4.04, -3.40, -3.59, -4.54, -4.03, -3.37, -4.20},
		// VAL
		{-4.96, -5.32, -6.29, -6.05, -6.48, -5.52, -5.18, -4.62, -4.04, -3.38, -3.46, -3.05, -2.83, -3.07, -2.48, -2.67, -3.58, -3.07, -2.49, -3.32},
		// TRP
		{-4.95, -5.55, -6.16, -5.78, -6.14, -5.18, -5.06, -4.66, -3.82, -3.42, -3.22, -2.99, -3.07, -3.11, -2.84, -2.99, -3.98, -3.41, -2.69, -3.73},
		// TYR
		{-4.16, -4.91, -5.66, -5.25, -5.67, -4.62, -4.66, -4.17, -3.36, -3.01, -3.01, -2.78, -2.76, -2.97, -2.76, -2.79, -3.52, -3.16, -2.60, -3.19},
		// ALA
		{-3.57, -3.94, -4.81, -4.58, -4.91, -4.04, -3.82, -3.36, -2.72, -2.31, -2.32, -2.01, -1.84, -1.89, -1.70, -1.51, -2.41, -1.83, -1.31, -2.03},
		// GLY
		{-3.16, -3.39, -4.13, -3.78, -4.16, -3.38, -3.42, -3.01, -2.31, -2.24, -2.08, -1.82, -1.74, -1.66, -1.59, -1.22, -2.15, -1.72, -1.15, -1.87},
		// THR
		{-3.11, -3.51, -4.28, -4.03, -4.34, -3.46, -3.22, -3.01, -2.32, -2.08, -2.12, -1.96, -1.88, -1.90, -1.80, -1.74, -2.42, -1.90, -1.31, -1.90},
		// SER
		{-2.86, -3.03, -4.02, -3.52, -3.92, -3.05, -2.99, -2.78, -2.01, -1.82, -1.96, -1.67, -1.58, -1.49, -1.63, -1.48, -2.11, -1.62, -1.05, -1.57},
		// GLN
		{-2.59, -2.95, -3.75, -3.24, -3.74, -2.83, -3.07, -2.76, -1.84, -1.74, -1.88, -1.58, -1.68, -1.71, -1.68, -1.51, -2.08, -1.64, -1.21, -1.53},
		// ASN
		{-2.85, -3.30, -4.10, -3.67, -4.04, -3.07, -3.11, -2.97, -1.89, -1.66, -1.90, -1.49, -1.71, -1.54, -1.46, -1.42, -1.98, -1.80, -1.29, -1.73},
		// GLU
		{-2.41, -2.57, -3.48, -3.17, -3.40, -2.48, -2.84, -2.76, -1.70, -1.59, -1.80, -1.63, -1.68, -1.46, -1.21, -1.02, -2.32, -2.29, -1.68, -1.33},
		// ASP
		{-2.27, -2.89, -3.56, -3.27, -3.59, -2.67, -2.99, -2.79, -1.51, -1.22, -1.74, -1.48, -1.51, -1.42, -1.02, -0.91, -2.15, -2.27, -1.80, -1.26},
		// HIS
		{-3.60, -3.98, -4.77, -4.14, -4.54, -3.58, -3.98, -3.52, -2.41, -2.15, -2.42, -2.11, -2.08, -1.98, -2.32, -2.15, -3.05, -2.16, -1.35, -2.25},
		// ARG
		{-2.57, -3.12, -3.98, -3.63, -4.03, -3.07, -3.41, -3.16, -1.83, -1.72, -1.90, -1.62, -1.64, -1.80, -2.29, -2.27, -2.16, -1.55, -0.59, -1.70},
		// LYS
		{-1.95, -2.48, -3.36, -3.01, -3.37, -2.49, -2.69, -2.60, -1.31, -1.15, -1.31, -1.05, -1.21, -1.29, -1.68, -1.80, -1.35, -0.59, -0.12, -0.97},
		// PRO
		{-3.07, -3.45, -4.25, -3.76, -4.20, -3.32, -3.73, -3.19, -2.03, -1.87, -1.90, -1.57, -1.53, -1.73, -1.33, -1.26, -2.25, -1.70, -0.97, -1.75}
	};
*/

void ContactMapUtil::readContactMapsFromFile(ifstream& fin, const string& dir, vector<DecoyContactStructure*>& structs) {
	string filename;
	char buf[100];
	while (!fin.eof()) {
		fin.getline(buf, 100);
		string path = dir + string(buf);
		ifstream cfile(path.c_str());
		if (!fin.good())
			continue;
		DecoyContactStructure* cstruct = new DecoyContactStructure();
		cstruct->read(cfile);
		cfile.close();
		structs.push_back(cstruct);
	}
}
