/**
\mainpage E.voli Documentation

\section sec_intro Introduction

E.voli is a software platform to simulate the evolution of proteins and protein-coding gene sequences.

\section sec_installation Installation

To build this project from svn:
\verbatim
   ./bootstrap
   ./configure
   make
\endverbatim

The build structure has been tested with automake v1.9, and may
not work with earlier versions of automake. You will need doxygen to generate the online documentation.

There are a variety of \c configure options that can be helpful: The option \c --enable-debug enables debugging symbols. The option \c --enable-final produces a highly optimized executable ready for production runs. The option \c --disable-apidoc disables the automatic building of the online documentation. This last option can be useful for development, when you have to do frequent recompiles. (The documentation can always be built by typing \c make in the \c doc directory.) The various \c configure options can be combined. For example, for code development, you should probably type:
\verbatim
  ./configure --enable-debug --disable-apidoc
\endverbatim

\section Programs

The E.voli project comes with a number of useful executables:
- \ref tr-driver -- translational robustness experiments
- \ref sequence-generator -- generate random protein sequences
- \ref get-weights -- calculate weights needed for \ref tr-driver

\section sec_coding_guidelines Coding guidelines

Most of the code in the E.voli project is written in C++. C++ is a powerful programming language, but it is easy to write C++ code that is buggy, slow, or hard to maintain in the long run. Adhere to the following guidelines to keep the E.voli code clean, bug-free, and easy to maintain.

Note: Almost all of these guidelines are violated somewhere in the E.voli code base. These cases are no justification to continue violating the guidelines, but should instead be considered candidates for cleanup and refactoring.

\subsection subsec_names 1. Naming of classes, variables, and functions

<b>Class names</b> start with an upper-case letter, and continue in camel case (see http://en.wikipedia.org/wiki/CamelCase ). Thus, the following are valid class names:
\code
	class Population;
	class FitnessEvaluator;
	class DecoyContactFolder;
\endcode

<b>Function names</b> start with a lower-case letter, and continue in camel case just as class names do. The following are valid function names:
\code
	void setPopulationSize( int N );
	uint getNumFolded();
	FoldInfo* fold( const Sequence& s );
\endcode

<b>Variable names</b> are all lower case, with underscores ('_') separating words. Member variables have a prefix 'm_'. The following are valid variable names:
\code
	int i;
	double error_weight;
	uint m_num_folded;
\endcode

\subsection subsec_indentation 2. Indentation and formatting

The E.voli project uses tabs for indentation, not spaces. One level of indentation is indicated with a single tab character.

Opening and closing curly braces indicating code blocks should appear on their own lines, and the code inbetween these braces indented one level. Code blocks consisting of a single line do not have curly braces:
\code
int foo( int i )
{
	if ( i<0 )
		return i+1;
	else
		return i-1;
}
\endcode
An exception to the curly-brace rule are short, inlined functions in class definitions, where the opening curly brace can appear right behind the function definition, and the closing curly brace after the last statement of the function:
\code
class A
{
	int foo( int i ) const {
		if ( i<0 )
			return i+1;
		else
			return i-1; }
};
\endcode

\subsection subsec_ref_values 3. Call by value and call by reference

There are two alternative ways to hand parameters to a function. Under <b>call by value</b>, the function receives a copy of the original object. A function declaration with call by value looks like this:
\code
	void foo( int i );
\endcode 
Under <b>call by reference</b>, the function receives a reference to the original object, that is, the function operates on the original object itself. A function declaration with call by reference looks like this:
\code
	void foo( int& i );
\endcode
(Note that we put the space between the ampersand and the variable name, not between the typename and the ampersand.)

In general, we use call by value for simple types (e.g., bool, int, double, pointers, and light-weight classes that can be copied quickly). For more complex types, we use call by reference, defining the reference as const (so that we cannot change the object):
\code
	class A
	{
	... // complex class definition with many member variables 
	};

	void foo( int i, const A& a ); // use call by value for int,
	                               // but call by const reference for complex class A
\endcode
Note that the complexity of a class depends on the number and size of the member variables, not on the number of member functions. The speed at which a class is created or copied is independent of how many member functions it has.

Usage of call by non-const reference should be kept to a minimum. There are cases where such calls make sense, for example when a function has to modify a complex object:
\code
	void modifyClassA( A& a ); // Function modifies an object of the complex class A.
	                           // Making intermediate copies of this object would be prohibitive.
\endcode
However, call by reference should not be misused as a method to return several data of simple data types. The reason why the latter use of call by reference is not a good idea is that it leads to code that is hard to read. As a case in point, imagine you read the following code, and are trying to figure out what it does:
\code
	int i=5;
	int j=0, k=0;
	double x;
	bool result = convert( i, j, k ); // test whether array indices are valid
	if ( result )
	{
		x = lookup_table[j][k]; // look up value for x
	}
	else
		cerr << "error, indices out of bound" << endl;
\endcode
Would you have imagined that \c convert() was defined as follows, and that the variable \c k will change after the call to convert, whereas i and j will not?
\code
	bool convert( int i, int j, int& k )
	{
		k = i-j;
		if ( k >= 0 ) return true;
		else return false;
	}
\endcode
A better strategy for defining the above function \c convert() would have been to define a compound return type and use that one:
\code
	struct Converted
	{
		int k;
		bool good;
	}

	Converted convert( int i, int j )
	{
		Converted c;
		c.k = i-j;
		if ( c.k >= 0 ) c.good=true;
		else c.good=false;
		return c;
	}
\endcode
The definition of the function \c convert() is now longer, and at a first glance this strategy may look unnecessary or cumbersome. But the result is that the client code now makes immediate sense:
\code
	int i=5, j=0;
	double x;
	Converted c = convert( i, j );
	if ( c.good )
	{
		x = lookup_table[j][c.k]; // look up value for x
	}
	else
		cerr << "error, indices out of bound" << endl;
\endcode
For functions that need to return two values, the data type \c pair from the standard library is useful. With this data type, we could alternatively have defined the function \c convert like this:
\code
	pair<int, bool> convert( int i, int j )
	{
		int k = i-j;
		bool good = false
		if ( k >= 0 ) good=true;
		return pair<int, bool>( k , good );
	}
\endcode
In general, it is good practice to give a function either a return value or have it operate on an object passed by reference, but not to do both.

\subsection subsec_casting 4. Casting

Always prefer C++-style casts over C-style casts:
\code
	double x = 5.0;
	int i = static_cast<int>( x ); // correct, C++-style cast
	int j = (int) x;               // incorrect, C-style cast!
\endcode
Some of the problems of C-style casts are that they will silently cast away constness of objects, and that it may not be clear to which exact object they apply.

If you have to cast down the object hierarchcy, use a dynamic cast. However, keep in mind that the necessity of frequent down casts may be an indication of poor object design.
\code
	struct A { virtual ~A() {;} } *a;
	struct B : public A {} *b;
	a = new B(); // casting up the object hierarchy is automatic,
	             // no cast is needed
	b = dynamic_cast<B*>( a ); // use dynamic_cast to cast down
	                           // the object hierarchy
\endcode
Dynamic casts come at a performance penalty, whereas static casts do not check at runtime whether the cast is actually valid. If the E.voli project evolves to a state where we need many dynamic casts in performance-critical locations, we will switch to a solution that behaves like a static cast if the program is compiled with the flag \c -DNDEBUG, and like a dynamic cast otherwise. For now, dynamic casts are preferred because of the added security they afford.


\subsection subsec_const 5. Const-correctness

Still to write...

\subsection subsec_assert 6. Asserts

Use the \c assert() statement liberally. Your code cannot have too many asserts. All \c assert() statements are removed from the code if it is compiled with \c -DNDEBUG (this flag is set automatically if you configure your build with the \c --enable-final option). Therefore, asserts do not have a performance penalty for production code, but provide invaluable help when debugging errors.

\subsection subsec_docu 7. Documentation

Document all classes and all member functions you write, at the location of their declaration (i.e., in the header file). Familiarize yourself with doxygen (described at http://www.stack.nl/~dimitri/doxygen/ ), and learn the various commands it provides to document code. Do not hesitate to include in the documentation example code demonstrating how to use your code.

*/



